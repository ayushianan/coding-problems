#include <bits/stdc++.h>
using namespace std;
struct Point 
{ 
    long int x; 
    long int y; 
}; 
bool onSegment(Point p, Point q, Point r) 
{ 
    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) && 
        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y)) 
       return true; 
    return false; 
} 
long int orientation(Point p, Point q, Point r) 
{ 
    long int val = (q.y - p.y) * (r.x - q.x) - 
              (q.x - p.x) * (r.y - q.y); 
    if (val == 0) return 0;   
    return (val > 0)? 1: 2;  
} 
long int doIntersect(Point p1, Point q1, Point p2, Point q2) 
{ 
    long int o1 = orientation(p1, q1, p2); 
    long int o2 = orientation(p1, q1, q2); 
    long int o3 = orientation(p2, q2, p1); 
    long int o4 = orientation(p2, q2, q1);
    if (o1 != o2 && o3 != o4) 
        return 1; 
    if (o1 == 0 && onSegment(p1, p2, q1)) return 1; 
 
    if (o2 == 0 && onSegment(p1, q2, q1)) return 1; 
    
    if (o3 == 0 && onSegment(p2, p1, q2)) return 1; 
    
    if (o4 == 0 && onSegment(p2, q1, q2)) return 1; 
    return 0; 
} 
int main() {
	// your code goes here
	long int t;
	cin>>t;
	while(t--)
	{
	    long int n,q;
	    cin>>n>>q;
	    long int arr[n],b[q][3];
	    long int x[n],y[n];
	    for(long int i=0;i<n;i++)
	    {
	        cin>>arr[i];
	        x[i]=i+1;
	        y[i]=arr[i];
	    }
	    long int x1,y1,x2,y2;
	    for(long int i=0;i<q;i++)
	    {
	        cin>>b[i][0];
	        cin>>b[i][1];
	        cin>>b[i][2];
	        x1=b[i][0];
	        y1=b[i][2];
	        x2=b[i][1];
	        y2=b[i][2];
	        long int count=0;
	        for(long int j=0;j<n-1;j++)
	        {
	            struct Point p2 = {x1, y1}, q2 = {x2,y2}; 
                struct Point p1 = {x[j],y[j]}, q1 = {x[j+1],y[j+1]}; 
                if(x[j+1]==x1&&y[j+1]==y1)
                    continue;
                else if(x[j]==x2&&y[j]==y2)
                    continue;
                else
                {
                    long int res=doIntersect(p1, q1, p2, q2);
                    if(res==1)
                        count++;
                }
	        }
	        cout<<count<<"\n";
	    }
	}
	return 0;
}

